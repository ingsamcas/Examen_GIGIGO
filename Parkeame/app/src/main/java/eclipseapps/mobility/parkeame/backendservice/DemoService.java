
  /*******************************************************************
  * DemoService.java
  * Generated by Backendless Corp.
  ********************************************************************/
		
package eclipseapps.mobility.parkeame.backendservice;

import android.os.AsyncTask;

import com.backendless.Backendless;
import com.backendless.BackendlessUser;
import com.backendless.async.callback.AsyncCallback;
import com.backendless.exceptions.BackendlessException;
import com.backendless.exceptions.BackendlessFault;

import java.util.*;
import java.util.concurrent.ExecutionException;

import eclipseapps.mobility.parkeame.activities.Credentials;
import eclipseapps.mobility.parkeame.backendservice.openpay.Address;
import eclipseapps.mobility.parkeame.backendservice.openpay.Customer;


  public class DemoService
  {
      static final String BACKENDLESS_HOST = "https://api.backendless.com";
      static final String SERVICE_NAME = "DemoService";
      static final String APP_ID = "AF5AA00D-C423-A9D1-FFFB-EDFBC25BBF00";
      static final String API_KEY = "48769467-C2F0-7D8F-FF60-948DFE835A00";

      private static DemoService ourInstance = new DemoService();

      private DemoService(  )
      {
      }

      public static DemoService getInstance()
      {
          return ourInstance;
      }

      public static void initApplication()
      {
          Backendless.setUrl( DemoService.BACKENDLESS_HOST );
          // if you invoke this sample inside of android application, you should use overloaded "initApp" with "context" argument
          Backendless.initApp( DemoService.APP_ID, DemoService.API_KEY );

          Backendless.Persistence.mapTableToClass( "Customer", Customer.class );
          Backendless.Persistence.mapTableToClass( "Address", Address.class );
          Backendless.Persistence.mapTableToClass( "DemoComment", DemoComment.class );
          Backendless.Persistence.mapTableToClass( "com.sample.api.openpay.Customer", Customer.class );
          Backendless.Persistence.mapTableToClass( "com.sample.api.openpay.Address", Address.class );
          Backendless.Persistence.mapTableToClass( "com.sample.api.DemoComment", DemoComment.class );
      }



      public java.lang.String transfer(float amount, java.lang.String frompayId, java.lang.String topayId, java.lang.String Description, java.lang.String orderId)
      {
          Object[] args = new Object[]{amount, frompayId, topayId, Description, orderId};
          return Backendless.CustomService.invoke( SERVICE_NAME, "transfer", args, java.lang.String.class );
      }

      public void transferAsync(float amount, java.lang.String frompayId, java.lang.String topayId, java.lang.String Description, java.lang.String orderId, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{amount, frompayId, topayId, Description, orderId};
          Backendless.CustomService.invoke( SERVICE_NAME, "transfer", args, java.lang.String.class, callback);
      }

      public java.lang.String addPayment(java.lang.String DeviceSsesionId, java.lang.String UserBackendlessId, java.lang.String orderId, java.lang.String tokenId, float amount)
      {
          Object[] args = new Object[]{DeviceSsesionId, UserBackendlessId, orderId, tokenId, amount};
          return Backendless.CustomService.invoke( SERVICE_NAME, "addPayment", args, java.lang.String.class );
      }

      public void addPaymentAsync(java.lang.String DeviceSsesionId, java.lang.String UserBackendlessId, java.lang.String orderId, java.lang.String tokenId, float amount, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{DeviceSsesionId, UserBackendlessId, orderId, tokenId, amount};
          Backendless.CustomService.invoke( SERVICE_NAME, "addPayment", args, java.lang.String.class, callback);
      }

      public java.lang.String addPaymentFromClient(java.lang.String DeviceSsesionId, java.lang.String payId, java.lang.String orderId, java.lang.String tokenId, float amount)
      {
          Object[] args = new Object[]{DeviceSsesionId, payId, orderId, tokenId, amount};
          return Backendless.CustomService.invoke( SERVICE_NAME, "addPaymentFromClient", args, java.lang.String.class );
      }

      public void addPaymentFromClientAsync(java.lang.String DeviceSsesionId,java.lang.String objectId, java.lang.String payId, java.lang.String orderId, java.lang.String tokenId, float amount, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{DeviceSsesionId, payId, orderId, tokenId, amount};
          Backendless.CustomService.invoke( SERVICE_NAME, "addPaymentFromClient", args, java.lang.String.class, callback);
      }

      public java.lang.String addBasicCustomer(java.lang.String name, java.lang.String email, boolean requiresAccount)
      {
          Object[] args = new Object[]{name, email, requiresAccount};
          return Backendless.CustomService.invoke( SERVICE_NAME, "addBasicCustomer", args, java.lang.String.class );
      }

      public void addBasicCustomerAsync(java.lang.String name, java.lang.String email, boolean requiresAccount, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{name, email, requiresAccount};
          Backendless.CustomService.invoke( SERVICE_NAME, "addBasicCustomer", args, java.lang.String.class, callback);
      }

      public java.lang.String addCustomer(Customer customer)
      {
          Object[] args = new Object[]{customer};
          return Backendless.CustomService.invoke( SERVICE_NAME, "addCustomer", args, java.lang.String.class );
      }

      public void addCustomerAsync(Customer customer, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{customer};
          Backendless.CustomService.invoke( SERVICE_NAME, "addCustomer", args, java.lang.String.class, callback);
      }

      public java.lang.String addCardToMerchant(java.lang.String TokenId, java.lang.String DeviceSessionId)
      {
          Object[] args = new Object[]{TokenId, DeviceSessionId};
          return Backendless.CustomService.invoke( SERVICE_NAME, "addCardToMerchant", args, java.lang.String.class );
      }

      public void addCardToMerchantAsync(java.lang.String TokenId, java.lang.String DeviceSessionId, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{TokenId, DeviceSessionId};
          Backendless.CustomService.invoke( SERVICE_NAME, "addCardToMerchant", args, java.lang.String.class, callback);
      }

      public java.lang.String addCardToCustomer(java.lang.String CustomerId, java.lang.String TokenId, java.lang.String DeviceSessionId)
      {
          Object[] args = new Object[]{CustomerId, TokenId, DeviceSessionId};
          return Backendless.CustomService.invoke( SERVICE_NAME, "addCardToCustomer", args, java.lang.String.class );
      }

      public void addCardToCustomerAsync(java.lang.String CustomerId, java.lang.String TokenId, java.lang.String DeviceSessionId, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{CustomerId, TokenId, DeviceSessionId};
          Backendless.CustomService.invoke( SERVICE_NAME, "addCardToCustomer", args, java.lang.String.class, callback);
      }

      public long deleteMerchantCard(java.lang.String TokenId)
      {
          Object[] args = new Object[]{TokenId};
          return Backendless.CustomService.invoke( SERVICE_NAME, "deleteMerchantCard", args, long.class );
      }
      public String deleteCustomerCard(java.lang.String CustomerId,java.lang.String TokenId)
      {
          ThreadDeleteCard thread=new ThreadDeleteCard();
          try {
              return thread.execute(CustomerId,TokenId).get();
          } catch (InterruptedException e) {
              e.printStackTrace();
              return e.getMessage();
          } catch (ExecutionException e) {
              e.printStackTrace();
              return e.getMessage();
          }

      }

      public void deletMerchantCardAsync(java.lang.String TokenId, AsyncCallback<Long> callback)
      {
          Object[] args = new Object[]{TokenId};
          Backendless.CustomService.invoke( SERVICE_NAME, "deleteMerchantCard", args, Long.class, callback);
      }
      public void deleteCustomerCardAsync(java.lang.String CustomerId,java.lang.String TokenId, AsyncCallback<Long> callback)
      {
          Object[] args = new Object[]{CustomerId,TokenId};
          Backendless.CustomService.invoke( SERVICE_NAME, "deleteCustomerCard", args, String.class, callback);
      }

      public java.lang.String getGreeting(java.lang.String guestName)
      {
          Object[] args = new Object[]{guestName};
          return Backendless.CustomService.invoke( SERVICE_NAME, "getGreeting", args, java.lang.String.class );
      }

      public void getGreetingAsync(java.lang.String guestName, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{guestName};
          Backendless.CustomService.invoke( SERVICE_NAME, "getGreeting", args, java.lang.String.class, callback);
      }
      public java.lang.String getCustomer(java.lang.String payId)
      {
          Object[] args = new Object[]{payId};
          return Backendless.CustomService.invoke( SERVICE_NAME, "getCustomer", args, java.lang.String.class );
      }

      public void getCustomerAsync(java.lang.String payId, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{payId};
          Backendless.CustomService.invoke( SERVICE_NAME, "getCustomer", args, java.lang.String.class, callback);
      }
      public void getCustomerTokens(String payId, AsyncCallback<String> callback)
      {
          Object[] args = new Object[]{payId};
          Backendless.CustomService.invoke( SERVICE_NAME, "getCustomerTokens", args, String.class, callback);
      }

      public java.lang.String saveComment(DemoComment comment)
      {
          Object[] args = new Object[]{comment};
          return Backendless.CustomService.invoke( SERVICE_NAME, "saveComment", args, java.lang.String.class );
      }

      public void saveCommentAsync(DemoComment comment, AsyncCallback<java.lang.String> callback)
      {
          Object[] args = new Object[]{comment};
          Backendless.CustomService.invoke( SERVICE_NAME, "saveComment", args, java.lang.String.class, callback);
      }

      private class ThreadDeleteCard extends AsyncTask<String,Integer,String> {
          @Override
          protected String doInBackground(String... params) {
              // TODO Auto-generated method stub
              try{
                  Object[] args = new Object[]{params[0],params[1]};
                  String result= Backendless.CustomService.invoke( SERVICE_NAME, "deleteCustomerCard", args, String.class );
                  return result;
              }catch (BackendlessException e){
                  return e.getMessage();
              }

          }
      }

  }



